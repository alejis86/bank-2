{"version":3,"sources":["cbanktokens.jpg","etherlogo.jpg","dbank.png","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","refreshPage","window","location","reload","App","Component","this","loadBlockchainData","props","dispatch","ethereum","web3","Web3","netId","eth","net","getId","accounts","getAccounts","balance","getBalance","setState","account","alert","token","Contract","Token","abi","networks","address","dbank","dBank","dBankAddress","tokenBalance","methods","balanceOf","state","call","appTokenBalance","utils","fromWei","appEtherBalance","e","console","log","amount","deposit","send","value","toString","from","preventDefault","withdraw","borrow","tokenBorrowed","collateralEther","approve","payOff","constructor","super","render","className","href","target","rel","role","Tabs","defaultActiveKey","id","Tab","eventKey","title","onSubmit","depositAmount","step","type","ref","input","placeholder","required","onClick","borrowAmount","src","etherlogo","alt","style","display","margin","width","cbtoken","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mFAAAA,EAAOC,QAAU,IAA0B,yC,oBCA3CD,EAAOC,QAAU,IAA0B,uC,0DCA3CD,EAAOC,QAAU,IAA0B,mC,kgBCW3C,SAASC,IACLC,OAAOC,SAASC,SAGpB,MAAMC,UAAYC,YAEQ,iCAChBC,KAAKC,mBAAmBD,KAAKE,MAAMC,UAGnB,yBAACA,GACvB,GAA6B,qBAAlBR,OAAOS,SAAuB,CAEzC,MAAMC,EAAO,IAAIC,IAAKX,OAAOS,UACvBG,QAAcF,EAAKG,IAAIC,IAAIC,QAC3BC,QAAiBN,EAAKG,IAAII,cAGhC,GAAyB,qBAAfD,EAAS,GAAkB,CAErC,MAAME,QAAgBR,EAAKG,IAAIM,WAAWH,EAAS,IAEnDX,KAAKe,SAAS,CAAEC,QAASL,EAAS,GAAIE,QAASA,EAASR,KAAOA,SAE/DV,OAAOsB,MAAM,8BAKb,IACA,MAAMC,EAAQ,IAAIb,EAAKG,IAAIW,SAASC,EAAMC,IAAKD,EAAME,SAASf,GAAOgB,SAC/DC,EAAQ,IAAInB,EAAKG,IAAIW,SAASM,EAAMJ,IAAKI,EAAMH,SAASf,GAAOgB,SAC/DG,EAAeD,EAAMH,SAASf,GAAOgB,QACrCI,QAAqBT,EAAMU,QAAQC,UAAU7B,KAAK8B,MAAMd,SAASe,OACjEC,QAAwB3B,EAAK4B,MAAMC,QAAQP,GAC3Cd,QAAgBR,EAAKG,IAAIM,WAAWH,EAAS,IAC7CwB,QAAwB9B,EAAK4B,MAAMC,QAAQrB,GACjDb,KAAKe,SAAS,CAACG,MAAOA,EAAOM,MAAOA,EAAOE,aAAcA,EACvDC,aAAcA,EAAcK,gBAAiBA,EAAiBG,gBAAiBA,IACjF,MAAOC,GACXC,QAAQC,IAAI,QAASF,GACrBzC,OAAOsB,MAAM,uDAOTtB,OAAOsB,MAAM,iEAYF,cAACsB,GACb,GAAsB,cAAnBvC,KAAK8B,MAAMN,MACX,UACQxB,KAAK8B,MAAMN,MAAMI,QAAQY,UAAUC,KAAK,CAACC,MAAOH,EAAOI,WAAYC,KAAM5C,KAAK8B,MAAMd,UAC1F,MAAOoB,GACPC,QAAQC,IAAI,mBAAoBF,IAKxB,eAACA,GAEb,GADAA,EAAES,iBACoB,cAAnB7C,KAAK8B,MAAMN,MACZ,UACQxB,KAAK8B,MAAMN,MAAMI,QAAQkB,WAAWL,KAAK,CAACG,KAAM5C,KAAK8B,MAAMd,UACjE,MAAMoB,GACNC,QAAQC,IAAI,oBAAqBF,IAM1B,aAACG,GACZ,GAAsB,cAAnBvC,KAAK8B,MAAMN,MACZ,UACQxB,KAAK8B,MAAMN,MAAMI,QAAQmB,SAASN,KAAK,CAACC,MAAOH,EAAOI,WAAYC,KAAM5C,KAAK8B,MAAMd,UACzF,MAAOoB,GACPC,QAAQC,IAAI,kBAAmBF,IAKzB,aAACA,GAEX,GADAA,EAAES,iBACoB,cAAnB7C,KAAK8B,MAAMN,MACZ,IACE,MACMwB,QADwBhD,KAAK8B,MAAMN,MAAMI,QAAQqB,gBAAgBjD,KAAK8B,MAAMd,SAASe,KAAK,CAACa,KAAM5C,KAAK8B,MAAMd,UAC5E,QAChChB,KAAK8B,MAAMZ,MAAMU,QAAQsB,QAAQlD,KAAK8B,MAAMJ,aAAcsB,EAAcL,YAAYF,KAAK,CAACG,KAAM5C,KAAK8B,MAAMd,gBAC3GhB,KAAK8B,MAAMN,MAAMI,QAAQuB,SAASV,KAAK,CAACG,KAAM5C,KAAK8B,MAAMd,UAC/D,MAAMoB,GACNC,QAAQC,IAAI,mBAAoBF,IAMtCgB,YAAYlD,GACVmD,MAAMnD,GACNF,KAAK8B,MAAQ,CACXzB,KAAM,YACNW,QAAS,GACTE,MAAO,KACPM,MAAO,KACPX,QAAS,EACTa,aAAc,KACdC,aAAa,EACbK,gBAAgB,EAChBG,gBAAgB,GAKpBmB,SACE,OACE,yBAAKC,UAAU,IACb,yBAAKA,UAAU,kEACb,uBACEA,UAAU,sCACVC,KAAK,yCACLC,OAAO,SACPC,IAAI,uBAGN,+CAGF,yBAAKH,UAAU,8CACf,6BACE,sDACA,qDACA,4BAAKvD,KAAK8B,MAAMd,SAChB,6BACA,yBAAKuC,UAAU,OACb,0BAAMI,KAAK,OAAOJ,UAAU,qCAC5B,yBAAKA,UAAU,YACf,4CACE,yBAAKA,UAAU,2BACd,kBAACK,EAAA,EAAD,CAAMC,iBAAiB,UAAUC,GAAG,4BACnC,kBAACC,EAAA,EAAD,CAAKC,SAAS,UAAUC,MAAM,WAC5B,6BACA,6BADA,mCAGE,6BAHF,4BAKE,6BALF,sCAOE,6BACA,0BAAMC,SAAW9B,IACfA,EAAES,iBACF,IAAIN,EAASvC,KAAKmE,cAAczB,MAChCH,GAAkB,IAAI,GACtBvC,KAAKwC,QAAQD,KAEb,yBAAKgB,UAAU,sBACf,6BACE,2BACEO,GAAG,gBACHM,KAAK,OACLC,KAAK,SACLC,IAAMC,IAAYvE,KAAKmE,cAAgBI,GACvChB,UAAU,+BACViB,YAAY,kBACZC,UAAQ,KAEZ,4BAAQJ,KAAK,SAASd,UAAU,mBAAhC,cAKA,kBAACQ,EAAA,EAAD,CAAKC,SAAS,WAAWC,MAAM,YACnC,6BACA,6BADA,wCAGE,6BACA,6BACF,6BACE,4BAAQI,KAAK,SAASd,UAAU,kBAAkBmB,QAAUtC,GAAMpC,KAAK8C,SAASV,IAAhF,eAEF,kBAAC2B,EAAA,EAAD,CAAKC,SAAS,SAASC,MAAM,UAC7B,6BAEA,6BAFA,gCAIE,6BAJF,4CAME,6BANF,kCAQE,6BACA,6BACA,0BAAMC,SAAW9B,IAEfA,EAAES,iBACF,IAAIN,EAASvC,KAAK2E,aAAajC,MAC/BH,GAAkB,IAAK,GACvBvC,KAAK+C,OAAOR,KAEZ,yBAAKgB,UAAU,sBACb,2BACEO,GAAG,eACHM,KAAK,OACLC,KAAK,SACLC,IAAMC,IAAYvE,KAAK2E,aAAeJ,GACtChB,UAAU,+BACViB,YAAY,YACZC,UAAQ,KAEZ,4BAAQJ,KAAK,SAASd,UAAU,mBAAhC,aAIN,kBAACQ,EAAA,EAAD,CAAKC,SAAS,SAASC,MAAM,UAC3B,6BAEA,6BAFA,kCAIE,6BAJF,yCAME,6BACA,6BACA,4BAAQI,KAAK,SAASd,UAAU,kBAAkBmB,QAAUtC,GAAMpC,KAAKmD,OAAOf,IAA9E,eASV,yBAAKmB,UAAU,0BACf,uCACA,oDACA,yBAAKqB,IAAKC,IAAWC,IAAK,OAAQC,MAAO,CAACC,QAAQ,QAASC,OAAO,WAAYC,MAAM,UACpF,4BAAKlF,KAAK8B,MAAMK,iBAEf,gEACA,yBAAKyC,IAAKO,IAASL,IAAK,OAAQC,MAAO,CAACC,QAAQ,QAASC,OAAO,WAAYC,MAAM,UACnF,4BAAKlF,KAAK8B,MAAME,iBAEhB,4BAAQuB,UAAU,kBAAmBmB,QAAUhF,GAA/C,+BAaKI,QCrQKsF,QACW,cAA7BzF,OAAOC,SAASyF,UAEe,UAA7B1F,OAAOC,SAASyF,UAEhB1F,OAAOC,SAASyF,SAASC,MACvB,2DCZNC,IAASjC,OAAO,kBAAC,EAAD,MAASkC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAKC,IACjCA,EAAaC,gB","file":"static/js/main.5bb9672f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cbanktokens.a142bddb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/etherlogo.1e0bf434.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dbank.adca41d3.png\";","import { Tabs, Tab } from 'react-bootstrap'\nimport dBank from '../abis/dBank.json'\nimport React, { Component } from 'react';\nimport Token from '../abis/Token.json'\nimport dbank from '../dbank.png';\nimport Web3 from 'web3';\nimport './App.css';\nimport cbtoken from '../cbanktokens.jpg';\nimport etherlogo from '../etherlogo.jpg';\n\n//h0m3w0rk - add new tab to check accrued interest\nfunction refreshPage(){ \n    window.location.reload(); \n}\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadBlockchainData(this.props.dispatch)\n  }\n\n  async loadBlockchainData(dispatch) {\n    if (typeof window.ethereum!=='undefined'){\n\n    const web3 = new Web3(window.ethereum)\n    const netId = await web3.eth.net.getId()\n    const accounts = await web3.eth.getAccounts()\n\n    //load balance\n    if(typeof accounts[0] !=='undefined'){\n    \n    const balance = await web3.eth.getBalance(accounts[0])\n\n    this.setState({ account: accounts[0], balance: balance, web3 : web3})\n  } else {\n    window.alert('Please login with Metamask')    \n  }\n    //Token\n    //Bank\n    //load contracts\n    try{\n    const token = new web3.eth.Contract(Token.abi, Token.networks[netId].address)\n    const dbank = new web3.eth.Contract(dBank.abi, dBank.networks[netId].address)\n    const dBankAddress = dBank.networks[netId].address\n    const tokenBalance = await token.methods.balanceOf(this.state.account).call()\n    const appTokenBalance = await web3.utils.fromWei(tokenBalance)\n    const balance = await web3.eth.getBalance(accounts[0])\n    const appEtherBalance = await web3.utils.fromWei(balance)\n    this.setState({token: token, dbank: dbank, dBankAddress: dBankAddress, \n      tokenBalance: tokenBalance, appTokenBalance: appTokenBalance, appEtherBalance: appEtherBalance})\n  } catch (e) {\nconsole.log('Error', e)\nwindow.alert('Contracts not deployed to the current network')\n\n  }\n\n\n   \n  } else {\n    window.alert('Please install a Wallet Like MetaMask to use this application');\n  }\n\n      //assign to values to variables: web3, netId, accounts\n\n      //check if account is detected, then load balance&setStates, elsepush alert\n\n      //in try block load contracts\n\n    //if MetaMask not exists push alert\n  }\n\n  async deposit(amount) {\n   if(this.state.dbank!=='undefined'){\n      try{\n        await this.state.dbank.methods.deposit().send({value: amount.toString(), from: this.state.account})\n      } catch (e) {\n        console.log('Error, deposit: ', e)\n      }\n    }\n  }\n\n  async withdraw(e) {\n    e.preventDefault()\n    if(this.state.dbank!=='undefined'){\n      try{\n        await this.state.dbank.methods.withdraw().send({from: this.state.account})\n      } catch(e) {\n        console.log('Error, withdraw: ', e)\n      }\n    }\n  }\n\n\n   async borrow(amount) {\n    if(this.state.dbank!=='undefined'){\n      try{\n        await this.state.dbank.methods.borrow().send({value: amount.toString(), from: this.state.account})\n      } catch (e) {\n        console.log('Error, borrow: ', e)\n      }\n    }\n  }\n\n  async payOff(e) {\n    e.preventDefault()\n    if(this.state.dbank!=='undefined'){\n      try{\n        const collateralEther = await this.state.dbank.methods.collateralEther(this.state.account).call({from: this.state.account})\n        const tokenBorrowed = collateralEther/2\n        await this.state.token.methods.approve(this.state.dBankAddress, tokenBorrowed.toString()).send({from: this.state.account})\n        await this.state.dbank.methods.payOff().send({from: this.state.account})\n      } catch(e) {\n        console.log('Error, pay off: ', e)\n      }\n    }\n  }\n\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      web3: 'undefined',\n      account: '',\n      token: null,\n      dbank: null,\n      balance: 0,\n      dBankAddress: null,\n      tokenBalance:0,\n      appTokenBalance:0,\n      appEtherBalance:0\n\n    }\n  }\n\n  render() {\n    return (\n      <div className=''>\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n            href=\"http://www.dappuniversity.com/bootcamp\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n        \n          <b>Crypto Banking</b>\n        </a>\n        </nav>\n        <div className=\"container-fluid mt-5 text-center col-md-10\">\n        <br></br>\n          <h1>Welcome to Crypto Bank</h1>\n          <span>Your Wallet Address</span>\n          <h4>{this.state.account}</h4>\n          <br></br>\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-md-12 d-flex text-center mt-5\">\n            <div className=\"col-md-8\">\n            <h3>Transactions</h3>\n              <div className=\"content mr-auto ml-auto\">\n               <Tabs defaultActiveKey=\"deposit\" id=\"uncontrolled-tab-example\">\n                <Tab eventKey=\"deposit\" title=\"Deposit\">\n                  <div>\n                  <br></br>\n                    How much do you want to deposit?\n                    <br></br>\n                       (min. amount is 0.01 ETH)\n                    <br></br>\n                    (1 deposit is possible at the time)\n                    <br></br>\n                    <form onSubmit={(e) => {\n                      e.preventDefault()\n                      let amount = this.depositAmount.value\n                      amount = amount * 10**18 //convert to wei\n                      this.deposit(amount)\n                    }}>\n                      <div className='form-group mr-sm-2'>\n                      <br></br>\n                        <input\n                          id='depositAmount'\n                          step=\"0.01\"\n                          type='number'\n                          ref={(input) => { this.depositAmount = input }}\n                          className=\"form-control form-control-md\"\n                          placeholder='Ether Amount...'\n                          required />\n                      </div>\n                      <button type='submit' className='btn btn-primary'>DEPOSIT</button>\n                    </form>\n\n\n                    </div></Tab>\n                      <Tab eventKey=\"withdraw\" title=\"Withdraw\">\n                  <div>\n                  <br></br>\n                   Withdraw your deposit + take interest\n                    <br></br>\n                    <br></br>\n                  <div>\n                    <button type='submit' className='btn btn-primary' onClick={(e) => this.withdraw(e)}>WITHDRAW</button>\n                  </div></div></Tab>\n                  <Tab eventKey=\"borrow\" title=\"Borrow\">\n                  <div>\n\n                  <br></br>\n                    Do you want to borrow tokens?\n                    <br></br>\n                    (You'll get 50% of collateral, in Tokens)\n                    <br></br>\n                    Type collateral amount (in ETH)\n                    <br></br>\n                    <br></br>\n                    <form onSubmit={(e) => {\n\n                      e.preventDefault()\n                      let amount = this.borrowAmount.value\n                      amount = amount * 10 **18 //convert to wei\n                      this.borrow(amount)\n                    }}>\n                      <div className='form-group mr-sm-2'>\n                        <input\n                          id='borrowAmount'\n                          step=\"0.01\"\n                          type='number'\n                          ref={(input) => { this.borrowAmount = input }}\n                          className=\"form-control form-control-md\"\n                          placeholder='amount...'\n                          required />\n                      </div>\n                      <button type='submit' className='btn btn-primary'>BORROW</button>\n                    </form>\n                  </div>\n                </Tab>\n                <Tab eventKey=\"payOff\" title=\"Payoff\">\n                  <div>\n\n                  <br></br>\n                    Do you want to payoff the loan?\n                    <br></br>\n                    (You'll receive your collateral - fee)\n                    <br></br>\n                    <br></br>\n                    <button type='submit' className='btn btn-primary' onClick={(e) => this.payOff(e)}>PAYOFF</button>\n                  </div>\n                </Tab>\n              </Tabs>\n\n\n              \n          </div></div>\n\n          <div className=\"col-md-4 bg-light px-2\">\n          <h3>Balance</h3>\n          <span>Your Ether Balance</span>\n          <img src={etherlogo} alt={\"logo\"} style={{display:\"block\", margin:\"5px auto\", width:\"50px\"}} /> \n          <h4>{this.state.appEtherBalance}</h4>\n\n           <span>Your Cryptobank Tokens Balance</span>\n           <img src={cbtoken} alt={\"logo\"} style={{display:\"block\", margin:\"5px auto\", width:\"50px\"}} /> \n          <h4>{this.state.appTokenBalance}</h4>\n\n          <button className='btn btn-primary'  onClick={ refreshPage }>Check updated balance</button>\n\n          </div>\n\n              \n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}